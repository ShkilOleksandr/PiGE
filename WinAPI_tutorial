#include "framework.h"
#include "tutorial.h"
#include "resource.h"
#include <string>
#include <stdlib.h>
#include <stdio.h>
#include <tchar.h>
#include <list>

using namespace std;

#define MAX_LOADSTRING 100


HINSTANCE hInst;
WCHAR szTitle[MAX_LOADSTRING];
WCHAR szWindowClass[MAX_LOADSTRING];
static list<POINT> pointList;

ATOM                 MyRegisterClass(HINSTANCE hInstance);
BOOL                 InitInstance(HINSTANCE, int);
LRESULT CALLBACK     WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK     About(HWND, UINT, WPARAM, LPARAM);
void GetTextInfoForMouseMsg (HWND hWnd,WPARAM wParam, LPARAM lParam, const TCHAR* msgName, TCHAR* buf, int bufSize);
void GetTextInfoForKeyMsg(WPARAM wParam, const TCHAR* msgName, TCHAR* buf, int bufSize);

int APIENTRY wWinMain(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance,
	_In_ LPWSTR  lpCmdLine, _In_ int  nCmdShow)
{
	UNREFERENCED_PARAMETER(hPrevInstance);
	UNREFERENCED_PARAMETER(lpCmdLine);

	LoadStringW(hInstance, IDS_APP_TITLE,
		szTitle, MAX_LOADSTRING);

	LoadStringW(hInstance, IDC_TUTORIAL,
		szWindowClass, MAX_LOADSTRING);

	MyRegisterClass(hInstance);

	if (!InitInstance(hInstance, nCmdShow))
	{
		return FALSE;
	}

	HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_TUTORIAL));
	

	MSG msg;

	while (GetMessage(&msg, nullptr, 0, 0))
	{
		if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
	}

	return static_cast<int>(msg.wParam);

}


ATOM MyRegisterClass(HINSTANCE hInstance)
{
	WNDCLASSEXW wcex;

	wcex.cbSize = sizeof(WNDCLASSEX);

	wcex.style                  = CS_HREDRAW | CS_VREDRAW | CS_DBLCLKS;
	wcex.lpfnWndProc            = WndProc;
	wcex.cbClsExtra             = 0;
	wcex.cbWndExtra             = 0;
	wcex.hInstance              = hInstance;
	wcex.hIcon = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_TUTORIAL));
	wcex.hCursor = nullptr;
	wcex.hbrBackground = CreateSolidBrush(RGB(0, 255, 0)); /*reinterpret_cast<HBRUSH>(COLOR_WINDOW + 1);*/
	wcex.lpszMenuName = nullptr;
	wcex.lpszClassName = szWindowClass;
	wcex.hIconSm = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_SMALL));

	return RegisterClassExW(&wcex);
}

BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
	//HWND hWnd;
	//int size = 150;
	//for (int i = 0; i < 3; i++)
	//{
	//	for (int j = 0; j < 3; j++)
	//	{
	//		hWnd = CreateWindow(szWindowClass, szTitle,
	//			WS_OVERLAPPEDWINDOW | WS_VISIBLE, i * 150, j * 150, 150, 150,
	//			NULL, NULL, hInstance, NULL);
	//	}
	//}
	hInst = hInstance;

	HWND hWnd = CreateWindowW(szWindowClass, szTitle,
		WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, 0, 1000, 500, nullptr, nullptr, hInstance,
		nullptr);
	
	DWORD err = GetLastError();

	SetWindowLong(hWnd, GWL_EXSTYLE,
		GetWindowLong(hWnd, GWL_EXSTYLE) | WS_EX_LAYERED);

	SetLayeredWindowAttributes(hWnd, 0, (255 * 50) / 100, LWA_ALPHA);



	HMENU hMenu = LoadMenu(hInstance, MAKEINTRESOURCE(IDC_TUTORIAL));
	if (!hWnd)
	{
		return FALSE;
	}
	SetMenu(hWnd, hMenu);
	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);

	return TRUE;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	static int stepSize = 10;
	const int maxSize = 400;
	const int minSize = 200;
	const int bufSize = 256;
	TCHAR buf[bufSize];
	static HCURSOR cursor = NULL;
	static HDC offDC = NULL;
	static HBITMAP offOldBitmap = NULL;
	static HBITMAP offBitmap = NULL;
	switch (message)
	{
	case WM_CREATE:
	{
		//SetTimer(hWnd, 7, 250, NULL);
		HDC hdc = GetDC(hWnd);
		offDC = CreateCompatibleDC(hdc);
		ReleaseDC(hWnd, hdc);
		cursor = LoadCursor(hInst, MAKEINTRESOURCE(IDC_CURSOR1));
	}
		break;
		case WM_SETCURSOR:
			SetCursor(cursor);
			return TRUE;
		//case WM_NCHITTEST:
		//	return HTCAPTION;
		case WM_COMMAND:
		{
			RECT rc;
			GetWindowRect(hWnd, &rc);
			OffsetRect(&rc, 20, 0);
			MoveWindow(hWnd, rc.left, rc.top,
				rc.right - rc.left, rc.bottom - rc.top, TRUE);
			
			int wmId = LOWORD(wParam);
			switch (wmId)
			{
				case IDM_ABOUT:
					DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
					break;
				case IDM_EXIT:
					DestroyWindow(hWnd);
					break;
				case IDM_AMESSAGE:
					DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
					break;
				default:
					return DefWindowProc(hWnd, message, wParam, lParam);
			}
		}
		break;
		case WM_ERASEBKGND:
			return 1;
		case WM_PAINT:
		{
			PAINTSTRUCT ps;
			HDC hdc = BeginPaint(hWnd, &ps);
			{
			//TCHAR s[] = _T("Hello World!");
			// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			//TextOut(hdc, 0, 0, s, (int)_tcslen(s));
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			/*RECT rc;
			GetClientRect(hWnd, &rc);
			DrawText(hdc, s, (int)_tcslen(s), &rc,
				DT_CENTER | DT_VCENTER | DT_SINGLELINE);*/
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			/*	HPEN pen = CreatePen(PS_SOLID, 2, RGB(255, 0, 0));
				HPEN oldPen = (HPEN)SelectObject(hdc, pen);
				MoveToEx(hdc, 0, 0, NULL);
				LineTo(hdc, 100, 100);
				SelectObject(hdc, oldPen);
				DeleteObject(pen);*/
				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

				/*HPEN pen = CreatePen(PS_DOT, 1, RGB(255, 0, 0));
				HPEN oldPen = (HPEN)SelectObject(hdc, pen);
				HBRUSH brush = CreateSolidBrush(RGB(0, 128, 0));
				HBRUSH oldBrush = (HBRUSH)SelectObject(hdc, brush);
				Rectangle(hdc, 20, 20, 120, 120);
				SelectObject(hdc, oldPen);
				DeleteObject(pen);
				SelectObject(hdc, oldBrush);
				DeleteObject(brush);*/

				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


				//TCHAR s[] = _T("Hello World!");
				//HFONT font = CreateFont(
				//	-MulDiv(24, GetDeviceCaps(hdc, LOGPIXELSY), 72),
				//	0,
				//	0,
				//	0,
				//	FW_BOLD,
				//	false,
				//	FALSE,
				//	0,
				//	EASTEUROPE_CHARSET,
				//	OUT_DEFAULT_PRECIS,
				//	CLIP_DEFAULT_PRECIS,
				//	DEFAULT_QUALITY,
				//	DEFAULT_PITCH | FF_SWISS,
				//	_T("Verdana")
				//);
				//HFONT oldFont = (HFONT)SelectObject(hdc, font);
				//RECT rc;
				//GetClientRect(hWnd, &rc);
				//DrawText(hdc, s, (int)_tcslen(s), &rc,
				//	DT_CENTER | DT_VCENTER | DT_SINGLELINE);
				//SelectObject(hdc, oldFont);
				//DeleteObject(font);

				//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		}

			//TCHAR s[] = _T("Hello world!");
			//HBITMAP bitmap = LoadBitmap(hInst, MAKEINTRESOURCE(IDB_BITMAP1));
			//HDC memDC = CreateCompatibleDC(hdc);
			//HBITMAP oldBitmap = (HBITMAP)SelectObject(memDC, bitmap);
			//BitBlt(hdc, 0, 0, 48, 48, memDC, 0, 0, SRCCOPY);
			//StretchBlt(hdc, 200, 100, -200, 100, memDC, 0, 0, 48, 48, SRCCOPY);
			//SelectObject(memDC, oldBitmap);
			//DeleteObject(bitmap);
			//DeleteDC(memDC);
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			//HBRUSH brush = CreateSolidBrush(RGB(128, 128, 0));
			//HBRUSH oldBrush = (HBRUSH)SelectObject(hdc, &brush);
			//list<POINT>::const_iterator iter = pointList.begin();
			//while (iter != pointList.end())
			//{
			//	POINT pt = *iter;
			//	const int rad = 5;
			//	Ellipse(hdc, pt.x - rad, pt.y - rad, pt.x + rad, pt.y + rad);
			//	iter++;
			//}
			//SelectObject(hdc, oldBrush);
			//DeleteObject(brush);
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

			//RECT rc;
			//GetClientRect(hWnd, &rc);
			//HBRUSH oldBrush = (HBRUSH)SelectObject(hdc, (HBRUSH)GetStockObject(GRAY_BRUSH));
			//Rectangle(hdc, 0, 0, rc.right, rc.bottom);
			//SelectObject(hdc, (HBRUSH)GetStockObject(BLACK_BRUSH));
			//const int margin = 50;
			//Rectangle(hdc, margin, margin, rc.right - margin, rc.bottom - margin);
			//SelectObject(hdc, oldBrush);
			//
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			RECT rc;
			GetClientRect(hWnd, &rc);
			HBRUSH oldBrush = (HBRUSH)SelectObject(offDC, (HBRUSH)GetStockObject(GRAY_BRUSH));
			Rectangle(offDC, 0, 0, rc.right, rc.bottom);
			SelectObject(offDC, (HBRUSH)GetStockObject(BLACK_BRUSH));
			const int margin = 50;
			Rectangle(offDC, margin, margin, rc.right - margin, rc.bottom - margin);
			SelectObject(offDC, oldBrush);
			BitBlt(hdc, 0, 0, rc.right, rc.bottom, offDC, 0, 0, SRCCOPY);
			EndPaint(hWnd, &ps);
		}
		break;
		case WM_DESTROY:
		{
			if (offOldBitmap != NULL)
			{
				SelectObject(offDC, offOldBitmap);
			}
			if (offDC != NULL)
			{
				DeleteDC(offDC);
			}
			if (offBitmap != NULL)
			{
				DeleteObject(offBitmap);
			}
			PostQuitMessage(0);
		}
			break;
		case WM_SIZE:
		{
			int clientWidth = LOWORD(lParam);
			int clientHeight = HIWORD(lParam);
			RECT rc;
			GetWindowRect(hWnd, &rc);
			wchar_t s[256];
			swprintf_s(s, 256, L"Window's size: %d x %d Client area's size: %d x %d ",
				rc.right - rc.left, rc.bottom - rc.top,
				clientWidth, clientHeight);
			SetWindowText(hWnd, s);

			//HDC hdc = GetDC(hWnd);
			//if (offOldBitmap != NULL)
			//{
			//	DeleteObject(offBitmap);
			//}
			//offBitmap = CreateCompatibleBitmap(hdc, clientWidth, clientHeight);
			//offOldBitmap = (HBITMAP)SelectObject(offDC, offBitmap);
			//ReleaseDC(hWnd, hdc);

			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

			HDC hdc = GetDC(hWnd);
			if (offOldBitmap != NULL)
			{
				SelectObject(offDC, offOldBitmap);
			}
			if (offBitmap != NULL)
			{
				DeleteObject(offBitmap);
			}
			offBitmap = CreateCompatibleBitmap(hdc, clientWidth, clientHeight);
			offOldBitmap = (HBITMAP)SelectObject(offDC, offBitmap);
			ReleaseDC(hWnd, hdc);
		}
		break;
		//case WM_GETMINMAXINFO:
		//{
		//	MINMAXINFO* minMaxInfo = (MINMAXINFO*)lParam;
		//	minMaxInfo->ptMaxSize.x = minMaxInfo->ptMaxTrackSize.x = 500;
		//	minMaxInfo->ptMaxSize.y = minMaxInfo->ptMaxTrackSize.y = 200;
		//	
		//}
		//break;
		//case WM_SIZING:
		//{
		//	RECT* rc = (RECT*)lParam;
		//	if (wParam == WMSZ_BOTTOM
		//		|| wParam == WMSZ_BOTTOMLEFT
		//		|| wParam == WMSZ_BOTTOMRIGHT
		//		|| wParam == WMSZ_TOP
		//		|| wParam == WMSZ_TOPLEFT
		//		|| wParam == WMSZ_TOPRIGHT)
		//	{
		//		rc->right = rc->left + rc->bottom - rc->top;
		//	}
		//	else
		//	{
		//		rc->bottom = rc->top + rc->right - rc->left;
		//	}
		//}
		break;
		case WM_TIMER:
		{
			//if (wParam == 7)
			//{
			//	RECT rc;
			//	SystemParametersInfo(SPI_GETWORKAREA, 0, &rc, 0);
			//	int centerX = (rc.left + rc.right + 1) / 2;
			//	int centerY = (rc.top + rc.bottom + 1) / 2;
			//	GetWindowRect(hWnd, &rc);
			//	int currentSize = max(rc.right - rc.left, rc.bottom - rc.top);
			//	currentSize += stepSize;
			//	if (currentSize >= maxSize)
			//		stepSize = -abs(stepSize);
			//	else if (currentSize <= minSize)
			//		stepSize = abs(stepSize);
			//	MoveWindow(hWnd, centerX - currentSize / 2,
			//		centerY - currentSize / 2, currentSize, currentSize, TRUE);
			//}
		}
		break;
		case WM_LBUTTONDOWN:
		{
			GetTextInfoForMouseMsg(hWnd, wParam, lParam, _T("LBUTTONDOWN"), buf, bufSize);
			SetWindowText(hWnd, buf);
			SetCapture(hWnd);
			//HDC hdc = GetDC(hWnd);
			//HBRUSH brush = CreateSolidBrush(RGB(128, 128, 0));
			//HBRUSH oldBrush = (HBRUSH)SelectObject(hdc, brush);
			//short x = (short)LOWORD(lParam);
			//short y = (short)HIWORD(lParam);
			//const int rad = 5;
			//Ellipse(hdc, x - rad, y - rad, x + rad, y + rad);
			//SelectObject(hdc, oldBrush);
			//DeleteObject(brush);
			//ReleaseDC(hWnd, hdc);
			//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			POINT pt;
			pt.x = (short)LOWORD(lParam);
			pt.y = (short)LOWORD(lParam);
			pointList.push_back(pt);
			InvalidateRect(hWnd, NULL, TRUE);
		}
			break;
		case WM_LBUTTONUP:
			ReleaseCapture();
			GetTextInfoForMouseMsg(hWnd, wParam, lParam, _T("LBUTTONUP"), buf, bufSize);
			SetWindowText(hWnd, buf);
			break;
		case WM_RBUTTONDOWN:
			GetTextInfoForMouseMsg(hWnd, wParam, lParam, _T("RBUTTONDOWN"), buf, bufSize);
			SetWindowText(hWnd, buf);
			break;
		case WM_RBUTTONUP:
			GetTextInfoForMouseMsg(hWnd, wParam, lParam, _T("RBUTTONUP"), buf, bufSize);
			SetWindowText(hWnd, buf);
			break;
		case WM_LBUTTONDBLCLK:
			GetTextInfoForMouseMsg(hWnd, wParam, lParam, _T("LBUTTONDBLCLK"), buf, bufSize);
			SetWindowText(hWnd, buf);
			break;
		case WM_RBUTTONDBLCLK:
			GetTextInfoForMouseMsg(hWnd, wParam, lParam, _T("RBUTTONDBLCLK"), buf, bufSize);
			SetWindowText(hWnd, buf);
			break;
		case WM_MBUTTONDBLCLK:
			GetTextInfoForMouseMsg(hWnd, wParam, lParam, _T("MBUTTONDBLCLK"), buf, bufSize);
			SetWindowText(hWnd, buf);
			break;
		case WM_CHAR:
			_stprintf_s(buf, bufSize, _T("WM_CHAR: %c"), (TCHAR)wParam);
			SetWindowText(hWnd, buf);
			break;
		case WM_KEYDOWN:
			GetTextInfoForKeyMsg(wParam, _T("KEYDOWN"), buf, bufSize);
			SetWindowText(hWnd, buf);
			break;
		case WM_KEYUP:
			GetTextInfoForKeyMsg(wParam, _T("KEYUP"), buf, bufSize);
			SetWindowText(hWnd, buf);
			break;
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}


INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	UNREFERENCED_PARAMETER(lParam);

	switch (message)
	{
		case WM_INITDIALOG:
			return static_cast<INT_PTR>(TRUE);
		case WM_COMMAND:
			if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
			{
				EndDialog(hDlg, LOWORD(wParam));
				return static_cast<INT_PTR>(TRUE);
			}
			break;
	}	
	return static_cast<INT_PTR>(FALSE);
}

void GetTextInfoForMouseMsg(HWND hWnd,WPARAM wParam, LPARAM lParam, const TCHAR* msgName, TCHAR* buf, int bufSize)
{
	short x = (short)LOWORD(lParam);
	short y = (short)HIWORD(lParam);
	POINT pt = { x, y };	
	ClientToScreen(hWnd, &pt);
	_stprintf_s(buf, bufSize, _T("%s x: %d, y: %d, (sx: %d, sy: %d) vk:"),
		msgName, x, y, pt.x, pt.y);
	if ((wParam == MK_LBUTTON) != 0)
	{
		_tcscat_s(buf, bufSize, _T(" LEFT"));
	}
	if ((wParam == MK_MBUTTON) != 0)
	{
		_tcscat_s(buf, bufSize, _T(" MIDDLE"));
	}
	if ((wParam == MK_RBUTTON) != 0)
	{
		_tcscat_s(buf, bufSize, _T(" RIGHT"));
	}
}

void GetTextInfoForKeyMsg(WPARAM wParam, const TCHAR* msgName, TCHAR* buf, int bufSize)
{
	static int counter = 0;
	counter++;
	_stprintf_s(buf, bufSize, _T("%s key: %d (counter: %d)"), msgName,
		wParam, counter);
}
